# swagger.yaml
openapi: '3.0.0'
info:
  title: ChatApp API
  version: '1.0.0'
  description: A simple Node.js API for managing users

servers:
  - url: http://localhost:5000  # Replace with your actual server URL if needed

components:
  schemas:
    Room:
      type: object
      properties:
        rid:
          type: string
        name:
          type: string
        active:
          type: boolean
    User:
      type: object
      properties:
        uid:
          type: string
        name:
          type: string
        email:
          type: string
        color:
          type: string
        active:
          type: boolean
    Message:
      type: object
      properties:
        mid:
          type: string
        content:
          type: string
        sender:
          type: User
        room:
          type: Room

paths:
  '/':
    get:
      summary: Checks if API is running
      responses:
        '200':
          description: API is running
          content:
            application/json:
              schema:
                type: string
                example: API Running

  '/api/rooms':
    get:
      summary: Get all rooms
      tags:
        - Rooms
      responses:
        '200':
          description: List of rooms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
    post:
      summary: Create a room
      tags:
        - Rooms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        '200':
          description: Created room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':  # Add specific error code for bad request
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
  '/api/rooms/{rid}':
    get:
      summary: Get a room by ID
      tags:
        - Rooms
      parameters:
        - in: path
          name: rid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: room found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '404':
          description: room not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
    put:
      summary: Update a room by ID
      tags:
        - Rooms
      parameters:
        - in: path
          name: rid
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        '200':
          description: Updated room
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':  # Add specific error code for bad request
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        '404':
          description: room not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
    delete:
      summary: Delete a room by ID
      tags:
        - Rooms
      parameters:
        - in: path
          name: rid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: room removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '404':
          description: room not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message

  '/api/users':
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
    post:
      summary: Create a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':  # Add specific error code for bad request
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
  '/api/users/{uid}':
    get:
      summary: Get a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: user found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
    put:
      summary: Update a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':  # Add specific error code for bad request
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        '404':
          description: user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
    delete:
      summary: Delete a user by ID
      tags:
        - Users
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: user removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message

  '/api/messages':
    get:
      summary: Get all messages
      tags:
        - Messages
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
    post:
      summary: Create a message
      tags:
        - Messages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: Created message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':  # Add specific error code for bad request
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
  '/api/messages/{mid}':
    get:
      summary: Get a message by ID
      tags:
        - Messages
      parameters:
        - in: path
          name: mid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: message found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: message not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
    put:
      summary: Update a message by ID
      tags:
        - Messages
      parameters:
        - in: path
          name: mid
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: Updated message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':  # Add specific error code for bad request
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        '404':
          description: message not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
    delete:
      summary: Delete a message by ID
      tags:
        - Messages
      parameters:
        - in: path
          name: mid
          required: true
          schema:
            type: string
      responses:
        '200':
          description: message removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '404':
          description: message not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
